import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { NetworkFirst, StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';

// Precache all assets generated by vite
precacheAndRoute(self.__WB_MANIFEST);

// Cache pages
registerRoute(
    ({ request }) => request.destination === 'document',
    new NetworkFirst({
        cacheName: 'pages-cache',
        plugins: [
            new ExpirationPlugin({
                maxEntries: 50,
                maxAgeSeconds: 30 * 24 * 60 * 60,
            }),
        ],
    })
);

// Cache assets (styles, scripts, fonts)
registerRoute(
    ({ request }) =>
        request.destination === 'style' ||
        request.destination === 'script' ||
        request.destination === 'font',
    new StaleWhileRevalidate({
        cacheName: 'assets-cache',
        plugins: [
            new ExpirationPlugin({
                maxEntries: 60,
                maxAgeSeconds: 30 * 24 * 60 * 60,
            }),
        ],
    })
);

// Cache images
registerRoute(
    ({ request }) => request.destination === 'image',
    new CacheFirst({
        cacheName: 'images-cache',
        plugins: [
            new ExpirationPlugin({
                maxEntries: 60,
                maxAgeSeconds: 30 * 24 * 60 * 60,
            }),
        ],
    })
);

// Push Notification Event
self.addEventListener('push', (event) => {
    console.log('Service Worker: Push received');

    let notification = {
        title: 'DicoStory',
        options: {
            body: 'Ada pembaruan baru di DicoStory!',
            icon: '/icons/icon-192x192.png',
            badge: '/icons/badge-96x96.png',
            vibrate: [100, 50, 100],
            data: { url: './' },
            actions: [
                {
                    action: 'open',
                    title: 'Buka App',
                    icon: '/icons/icon-192x192.png',
                },
                {
                    action: 'close',
                    title: 'Tutup',
                },
            ],
        },
    };

    if (event.data) {
        try {
            const dataJson = event.data.json();
            notification = { ...notification, ...dataJson };
        } catch (e) {
            console.error('Error parsing push data:', e);
        }
    }

    event.waitUntil(
        self.registration.showNotification(notification.title, notification.options)
    );
});

// Notification Click Event
self.addEventListener('notificationclick', (event) => {
    console.log('Service Worker: Notification clicked');

    event.notification.close();

    if (event.action === 'close') {
        return;
    }

    const urlToOpen = event.notification.data && event.notification.data.url
        ? event.notification.data.url
        : './';

    event.waitUntil(
        clients.matchAll({ type: 'window', includeUncontrolled: true })
            .then((clientList) => {
                for (const client of clientList) {
                    if (client.url.includes('index.html') || client.url === urlToOpen) {
                        return client.focus();
                    }
                }

                if (clients.openWindow) {
                    return clients.openWindow(urlToOpen);
                }
            })
    );
}); 